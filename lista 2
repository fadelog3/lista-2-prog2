#Questão 1

import numpy as np 
from time import time
import sys

class MyArray():
    def __init__(self, capacity, lista=[]):
        self.nparray = np.empty(capacity, dtype=object)
        self.cap = capacity
        self.size = 0

        if lista != []:
            for i in lista:
                self.append(i)

    def append(self, number):
        if self.size == self.cap:
            self.change_size()
        self.nparray[self.size] = number
        self.size += 1

    def change_size(self):
        new_cap = self.cap * 2
        new_nparray = np.empty(new_cap, dtype=object)
        new_nparray[:self.size] = self.nparray
        self.nparray = new_nparray
        self.cap = new_cap

    def __repr__(self):
        return str(self.nparray[:self.size])

array=MyArray(1, [7,8,9,10, 11])
print(array)

#Com esse código usado para comparar os tempos entre appendar elementos na lista e no MyArray vemos que o menor tempo é das listas. Isso pode ocorrer, pois o array gasta tempo duplicando o seu tamanho 
#e também pelo fato de que a complexidade de adicionar um elemento na lista é O(1) e no array pode ser até 0(n).

list_1 = [] 
array = MyArray(1)  # Inicia com capacidade 1

t_list  = 0
t_np    = 0

# Loop que appenda 1024 elementos na lista e em MyArray

for i in range(1024):

    # Medindo tempo de appendar na lista

    sa2 = time()
    list_1.append(i + 1)
    sa3 = time()

    # Medindo tempo de appendar no MyArray

    sa4 = time()
    array.append(i + 1)  # Usar o método append da classe MyArray
    sa5 = time()

    t_list += (sa3 - sa2)
    t_np += (sa5 - sa4)

# Printando o tempo total dos dois

print(f'Total time for Python List  = {t_list:.4f} seconds')
print(f'Total time for MyArray  = {t_np:.4f} seconds')

#Questão 2

class ToroArray(MyArray):
    def __init__(self, capacity, lista):
        super().__init__(capacity, lista)

    def __getitem__(self, position):
        return self.nparray[position%self.size]
    
    
array=ToroArray(1, [10, 11, 12, 13, 14])
print(array[-20])


