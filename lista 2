#Questão 1

import numpy as np 
from time import time
import sys

class MyArray():
    def __init__(self, capacity, lista=[]):
        self.nparray = np.empty(capacity, dtype=object)
        self.cap = capacity
        self.size = 0

        if lista != []:
            for i in lista:
                self.append(i)

    def append(self, number):
        if self.size == self.cap:
            self.change_size()
        self.nparray[self.size] = number
        self.size += 1

    def change_size(self):
        new_cap = self.cap * 2
        new_nparray = np.empty(new_cap, dtype=object)
        new_nparray[:self.size] = self.nparray
        self.nparray = new_nparray
        self.cap = new_cap

    def __repr__(self):
        return str(self.nparray[:self.size])

t_list  = 0
t_np    = 0

for i in range(1024):

    sa1 = time()
    sa2 = time()

    list_1.append(i + 1)
    sa3 = time()

    np_array = np.append(np_array, np.uint16(i + 1))
    sa4 = time()

    print(f'=== {i} ===')
    print(f'list_1 memory size   = {sys.getsizeof(list_1)} bytes - time = {sa3-sa2:.4}')
    print(f'np_array memory size = {sys.getsizeof(np_array)} bytes - time = {sa4-sa3:.4}')

    t_list  += sa3 - sa2
    t_np    += sa4 - sa3

print(f'Total time for Python List  = {t_list:.4f} seconds')
print(f'Total time for NumPy Array  = {t_np:.4f} seconds')

#Questão 2

class ToroArray(MyArray):
    def __init__(self, capacity, lista):
        super().__init__(capacity, lista)

    def __getitem__(self, position):
        return self.nparray[position%self.size]
    
    
array=ToroArray(1, [10, 11, 12, 13, 14])
print(array[-20])


